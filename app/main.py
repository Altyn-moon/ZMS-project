from fastapi import FastAPI, Form, Request, Depends
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session
from fastapi import status
from pydantic import BaseModel

from app import crud, schemas

from app.database import SessionLocal
from app.models import User

from app.database import Base, engine
Base.metadata.create_all(bind=engine)


app = FastAPI()

app.mount("/static", StaticFiles(directory="app/static"), name="static")
templates = Jinja2Templates(directory="app/templates")

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

"""added"""
class UserCreate(BaseModel):
    name: str
    role: str
    login: str
    password: str
    uid: str
    job_title: str

@app.post("/users/")
def create_user(user: UserCreate):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    sql = """
    INSERT INTO users (name, role, login, password, uid, job_title, created_time)
    VALUES (%s, %s, %s, %s, %s, %s, NOW())
    """
    cursor.execute(sql, (user.name, user.role, user.login, user.password, user.uid, user.job_title))
    conn.commit()
    conn.close()
    return {"message": "User created successfully!"}
"""end"""


@app.get("/", response_class=HTMLResponse)
def login_form(request: Request):
    return templates.TemplateResponse("index.html", {"request": request, "message": ""})
    
@app.post("/login", response_class=HTMLResponse)
def login(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    print(f"–ü–æ–ª—É—á–µ–Ω –ª–æ–≥–∏–Ω: {username}, –ø–∞—Ä–æ–ª—å: {password}")  # üëà –õ–æ–≥
    user = db.query(User).filter(User.login == username, User.password == password).first()
    if user:
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.login}, —Ä–æ–ª—å: {user.role}")  # üëà –õ–æ–≥
        response = RedirectResponse(url="/dashboard", status_code=status.HTTP_302_FOUND)
        response.set_cookie(key="user_role", value=user.role)
        response.set_cookie(key="username", value=user.name)
        return response
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")  # üëà –õ–æ–≥
        return templates.TemplateResponse("index.html", {
            "request": request,
            "message": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            "force_login_screen": True
        })

@app.get("/dashboard", response_class=HTMLResponse)
def dashboard(request: Request):
    user_name = request.cookies.get("username", "–ì–æ—Å—Ç—å")  # cookie —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –§–ò–û
    print(f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ cookie: {user_name}")  # –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    work_items = [
        {"id": 1, "name": "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–Ω–∏–∫–∞", "client": "–¢–û–û ¬´–°–ë–ü¬ª –ö–∞–∑–º—É–Ω–∞–π–≥–∞–∑-–ë—É—Ä–µ–Ω–∏–µ", "job_num": "1135-24"},
        {"id": 2, "name": "–í—Ç—É–ª–∫–∞ –¥–ª—è —à–∞—Ä–Ω–∏—Ä–∞", "client": "–¢–®–û", "job_num": "1136-24"},
        {"id": 3, "name": "–ì–∞–π–∫–∞ —à–∞—Ä–Ω–∏—Ä–∞ (–ª–µ–≤–∞—è —Ä–µ–∑—å–±–∞) –¥–ª—è –±—É—Ä–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "client": "–¢–®–û", "job_num": "1137-24"},
        {"id": 4, "name": "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–Ω–∏–∫–∞", "client": "–¢–û–û ¬´–°–ë–ü¬ª –ö–∞–∑–º—É–Ω–∞–π–≥–∞–∑-–ë—É—Ä–µ–Ω–∏–µ", "job_num": "1138-24"},
        {"id": 5, "name": "–í—Ç—É–ª–∫–∞ –¥–ª—è —à–∞—Ä–Ω–∏—Ä–∞", "client": "–¢–®–û", "job_num": "1139-24"},
        {"id": 6, "name": "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–Ω–∏–∫–∞", "client": "–¢–û–û ¬´–°–ë–ü¬ª –ö–∞–∑–º—É–Ω–∞–π–≥–∞–∑-–ë—É—Ä–µ–Ω–∏–µ", "job_num": "1140-24"},
        {"id": 7, "name": "–í—Ç—É–ª–∫–∞ –¥–ª—è —à–∞—Ä–Ω–∏—Ä–∞", "client": "–¢–®–û", "job_num": "1141-24"},
        {"id": 8, "name": "–ì–∞–π–∫–∞ —à–∞—Ä–Ω–∏—Ä–∞ (–ª–µ–≤–∞—è —Ä–µ–∑—å–±–∞) –¥–ª—è –±—É—Ä–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "client": "–¢–®–û", "job_num": "1142-24"},
        {"id": 9, "name": "–ì–∞–π–∫–∞ —à–∞—Ä–Ω–∏—Ä–∞ (–ª–µ–≤–∞—è —Ä–µ–∑—å–±–∞) –¥–ª—è –±—É—Ä–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "client": "–¢–®–û", "job_num": "1143-24"},
        {"id": 10, "name": "–í—Ç—É–ª–∫–∞ –¥–ª—è —à–∞—Ä–Ω–∏—Ä–∞", "client": "–¢–®–û", "job_num": "1144-24"},
    ]
    return templates.TemplateResponse("dashboard.html", {
        "request": request,
        "user_name": user_name,
        "work_items": work_items
    })

from fastapi import Form
from fastapi.responses import RedirectResponse

# === –í–•–û–î –î–õ–Ø –ê–î–ú–ò–ù–ê ===

@app.get("/admin/login", response_class=HTMLResponse)
async def admin_login_page(request: Request):
    return templates.TemplateResponse("admin_login.html", {"request": request})

@app.post("/admin/login")
async def admin_login(
    request: Request,
    username: str = Form(...),
    password: str = Form(...)
):
    # –í–†–ï–ú–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê (–∑–∞–º–µ–Ω–∏—à—å –ø–æ—Ç–æ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑ –ë–î)
    if username == "admin" and password == "1234":
        response = RedirectResponse(url="/admin/dashboard", status_code=302)
        return response
    return templates.TemplateResponse("admin_login.html", {"request": request, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"})

@app.get("/admin/dashboard", response_class=HTMLResponse)
async def admin_dashboard(request: Request):
    return templates.TemplateResponse("admin_dashboard.html", {"request": request})

"""added from Altush"""
# ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/users/", response_model=schemas.UserOut)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    return crud.create_user(db=db, user=user)

# üìÑ –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/users/{user_id}", response_model=schemas.UserOut)
def read_user(user_id: int, db: Session = Depends(get_db)):
    return crud.get_user(db=db, user_id=user_id)

# üìÑ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.get("/users/", response_model=list[schemas.UserOut])
def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    return crud.get_users(db=db, skip=skip, limit=limit)

# ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.put("/users/{user_id}", response_model=schemas.UserOut)
def update_user(user_id: int, user: schemas.UserUpdate, db: Session = Depends(get_db)):
    updated_user = crud.update_user(db, user_id, user)
    if updated_user is None:
        return {"error": "User not found"}
    return updated_user

# ‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.delete("/users/{user_id}")
def delete_user(user_id: int, db: Session = Depends(get_db)):
    deleted_user = crud.delete_user(db, user_id)
    if deleted_user is None:
        return {"error": "User not found"}
    return {"message": "User deleted"}


